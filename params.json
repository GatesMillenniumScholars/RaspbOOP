{"name":"Raspboop-bot","tagline":"A Raspberry Pi powered robot library dedicated to simplifying the usage of GPIO pin peripherals.","body":"RaspbOOP-Bot\r\n===========\r\n\r\nA Raspberry Pi powered robot library with a code base dedicated to employing Object oriented programming practices geared towards abstracting electronic components, boards, and sensors - anything that can be interfaced through the Raspberry Pi's GPIO pins. \r\n\r\nRaspboop takes advantage of, and abstracts over, the amazing [WiringPi library](http://www.wiringpi.com) for its ease of use and stability.\r\n\r\n\r\nAn Example\r\n==========\r\n\r\n```cpp\r\n#include <stdio.h>\r\n#include <raspboop/Raspboop.h>\r\n\r\nusing raspboop::HCSR04;\r\nusing raspboop::HCSR501;\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n\r\n#define SIG 6\r\n#define TRIG 4\r\n#define ECHO 5\r\n\r\n\traspboop::Init(raspboop::WIRING);\r\n\r\n\tbool ShouldRun = true;\r\n\tHCSR04* DistanceSensor = HCSR04::Create(ECHO, TRIG);\r\n\tHCSR501* InfraredSensor = HCSR501::Create(SIG);\r\n\r\n\twhile(ShouldRun)\r\n\t{\r\n\t\t\r\n\t\tInfraredSensor->Sense();\r\n\t\tDistanceSensor->Sense();\r\n\r\n\t\tint Motion = InfraredSensor->IsSignalled();\r\n\t\tfloat Distance = DistanceSensor->GetDistance();\r\n\r\n\t\tprintf(\"Motion Detected: %d\", Motion);\r\n\t\tprintf(\"Distance: %0.2f centimeters\", Distance);\r\n\r\n\t\tif(Distance < 20.0f)\r\n\t\t\tShouldRun = false;\r\n\t\telse\r\n\t\t\tdelay(1000);\r\n\t}\r\n\r\n\tdelete InfraredSensor;\r\n\tdelete DistanceSensor;\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\nBuilding & Contributing\r\n=======================\r\n\r\nRaspbOOP-Bot uses **CMake** to generate the necessary build files. You can also generate build files for your preferred IDE/Compiler.\r\n\r\nYou will also need a **Raspberry Pi**, although it is recommended to develop on your preferred *nix platform, and then test new code on the Raspberry Pi.\r\n\r\nYou will also need **git**.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}