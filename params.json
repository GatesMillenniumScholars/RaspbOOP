{"name":"Raspboop","tagline":"A Raspberry Pi powered robot library dedicated to simplifying the usage of GPIO pin peripherals.","body":"RaspbOOP\r\n===========\r\n\r\nA Raspberry Pi powered robot library with a code base dedicated to employing Object oriented programming practices geared towards abstracting electronic components, boards, and sensors - anything that can be interfaced through the Raspberry Pi's GPIO pins. \r\n\r\nRaspboop takes advantage of, and abstracts over, the amazing [WiringPi library](https://github.com/WiringPi/WiringPi) for its ease of use and stability.\r\n\r\nDocumentation\r\n-------------\r\n\r\nAn integral part of Raspboop is documentation. [Checkout out this doc page](http://jgcoded.github.io/RaspbOOP/doc/html/classraspboop_1_1HCSR04.html#details) to get an idea of how Raspboop will make developing with sensors, boards, or any peripheral device that much easier.\r\n\r\nAn Example\r\n==========\r\n\r\n```cpp\r\n#include <raspboop/Raspboop.h>\r\n#include <map>\r\n\r\nusing namespace std;\r\nusing namespace rbp;\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    rbp::Init();\r\n\r\n    Server server;\r\n    HCSR04 distanceSensor(WiringPiPins::GPIO0,\r\n                          WiringPiPins::GPIO1);\r\n\r\n    distanceSensor.SetComponentId(0);\r\n\r\n    map<unsigned char, Commandable*> robotParts;\r\n\r\n    robotParts.insert(make_pair(distanceSensor.GetComponentId(),\r\n                                dynamic_cast<Commandable*>(&distanceSensor)));\r\n\r\n    // Allow clients to find this robot automatically\r\n    server.EnableAutodiscovery(\"0.0.0.0\");\r\n\r\n    server.AddCallback([&] (const Command* cmd, Server*) {\r\n\r\n                            auto search =\r\n                                    robotParts.find(cmd->GetComponentId());\r\n\r\n                            if(search != robotParts.end())\r\n                                search->second->AcceptCommand(*cmd);\r\n                       });\r\n\r\n    server.Start();\r\n    return 0;\r\n}\r\n\r\n\r\n```\r\n\r\nBuilding & Contributing\r\n=======================\r\n\r\nRaspbOOP-Bot uses **CMake** to generate the necessary build files. You can also generate build files for your preferred IDE/Compiler.\r\n\r\nYou will also need a **Raspberry Pi**, although it is recommended to develop on your preferred *nix platform, and then test new code on the Raspberry Pi.\r\nRaspboop automatically downloads and uses the newest version of wiringPi for you.\r\n\r\nYou will also need **git**.\r\n\r\nLicensing\r\n=========\r\nUnless otherwise stated, all files and all subsequent files relative to the path of this README are licensed under\r\n***The MIT License (MIT)***. A copy of THE MIT License (MIT) can be found in the same directory as the README.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}